 child this night PFV.PART then PROG AF.sit chair=3SG.GEN FS
  FIL  FS all FIL side FIL  sleep-LF=3SG.GEN  bed=3SG.GEN then PROG FIL  <AF>see dog this FIL PROG AF.play.around dog  <AF>see all then KA  then KA  frog
  FIL  morning PFV.PART then PROG FS  AF.get.up NOM child this PFV.PART
  well  well  PROG AF-sleep PFV.PART FS  night PFV.PART then PROG AF-go FIL AF.sleep  bed sleep-LF=3SG.GEN NOM child this
  then PROG self FIL  FIL  there NOM  then KA  FS  dog also FIL side=3SG.GEN FS  AF.together AF.sleep PROG AF-be.at FIL  frog this also  PROG self CAU-sleep-PF be.like.this FIL  PART  then KA  FIL  be.like that PART there
  then  that KA morning PFV.PART PART  PROG FIL  AF.get.up NOM child this PFV.PART then CONJ dog=3SG.GEN
  PROG AF-gaze be.like.this window be.like.this outside then AF-gaze be.like.this then KA  then KA FIL  ground=3SG.GEN
  then that KA  PROG FIL  AF.play.around dog=3SG.GEN child this  PROG AF.play.around dog=3SG.GEN child this PART be.like.this  PROG <AF>tease dog=3SG.GEN then PROG=3SG.GEN  take-PF NOM  then KA  cushion=3SG.GEN PROG=3SG.GEN  FS be.like.this then KA  FIL be.like.this FIL  AF-shoot then KA FS  FS  then KA dog this
  then that KA  that KA afterwards again PROG then KA AF-go  FS  AF-gaze  AF.from window NOM child this CONJ dog this  FIL FS FIL  FIL AF-go AF-gaze outside PFV.PART
  then  FS  child this PROG self AF-gaze AF.from outside  PROG AF-see dog=3SG.GEN PROG AF-go <AF>run outside
  FIL AF-go FIL  be.like.this <AF>bring FIL FS  what PFV.PART FIL  FIL AF-go FS FS  EXIST be.like.this be.at-LF all  tree then be.like.this grass PROG AF-go be.like.this  <AF>run PROG AF-go play.around outside NOM dog
  thus PROG=3SG.GEN go-LF then KA  then KA  then KA  AF-hug NOM dog=3SG.GEN this PFV.PART  PROG=3SG.GEN FS  PROG=3SG.GEN hold-PF AF-hug PROG=3SG.GEN play.around-LF outside there  thus PROG AF-go FIL  AF.walk be.like.this garden FIL  house=3SG.GEN
  thus PROG AF-go be.like.this garden house=3SG.GEN PFV.PART then PROG be.like.this FIL  AF-call NOM  child this then PROG FS  PROG self <AF>bark AF-call NOM dog this also
  thus PROG AF-go FIL  AF-see then KA PROG FS  AF-see tree FIL  be.like.this FS  be.like.this  farther  be.like.this at.across=3SG.GEN house=3SG.GEN then  PROG FIL  be.at-LF FIL  see-LF=3SG.GEN be.at-LF one FIL hole FS   hole NOM tree this then be.at-LF NOM be.like.this then KA  then KA nest bee
  then thus child this CONJ FIL  then KA dog this PART FIL AF-go AF.arrive be.like.this FIL  root tree PFV.PART then
  PROG AF-go AF-see  then KA  be.like.this nest FIL bee  NOM AUX.PST FIL PROG AF-go AF.fly NOM bee PFV.PART
  then thus FS  PROG be.like.this  AF.prepare FIL  AF.FUT-climb tree NOM dog this PROG FIL  bark-PF be.like.this bee this then FS  AF.fly all NOM bee this PROG AF-come FIL  outside be.like.this  then KA  FIL be.like.this  FS FUT-bite child this then all FIL  frog this also PROG  be.like.this AF.be.shocked AF.be.shocked PFV.PART
  then thus  AF-finish AUX.PST=3PL.GEN take-PF then KA   fall-PF NOM then KA nest bee this PFV.PART FS  that all bee this PROG AF-go FIL  AF-climb FS PART FIL be.like.this  AF-see AF-climb up NOM AF-see FIL  tree up NOM dog this  then all frog
  then FS FS  then  FIL AF-go  AF-see again NOM  side=3SG.GEN be.like.this mountain this PFV.PART PART
  be.at-LF one FIL be.like.this then KA  be.at-LF  one be.like.this tree big FIL  be.like.this FIL  mountain that be.like.this cliff a.little be.at-LF hole NOM tree
  then  AUX.PST FIL AF-climb then KA  up there NOM child this then PROG AF-go AF-see hole=3SG.GEN then thus  AF-go AF-see hole=3SG.GEN PFV.PART then NEG know-PF.IRR NOM  FIL AF.from FIL  indide AF-come NOM then KA  owl  owl PFV.PART PART
  <AF>see NOM  child AUX.PST AF.be.shocked PART FS AF-stumble PFV.PART  stumble FIL fall dirt then  thus  be.like.this this FIL  cliff all this PFV.PART then PART be.like.this FIL  PROG AF-go <AF>run NOM dog this PROG AF-go  <AF>run AF-see child PROG  AF.stumble
  then  thus  child this FIL PROG AF-go be.like.this FIL  FIL AF-come again NOM then KA  then KA  owl this PROG AF-come AF.fly again then FS
  FS PART be.like.this  FIL AF.be.shocked NOM child this FIL AF-fear AF.say  bite-PF=1IPL.NOM=3SG.GEN  come-PF=1PL.NOM=3SG.GEN <AF>peck head all be.like.this
  FIL  <PFV>how.to-PF AF-cover a.little NOM head=3SG.GEN be.like.this FS  AF-hide AF-go  NEG FS thus AUX.PST AF-climb FIL  real FIL  above FIL stone  big NOM child this PFV.PART
  AUX.PST AF.outlook there NOM FS  FS tree.brunch tree there NOM  FIL then KA  owl this PFV.PART then PART  <AF>see child this  PROG self  AF.sit FIL  below  root  FIL  PROG self below FIL  stone big there NOM  then KA dog
  thus  then KA  thus PROG AF-go  child this again PROG self  PROG AF.sit FS FIL tree.branch  tree PROG NOM then KA owl then PROG <AF>see  3PL then child this FIL
  PROG AF-go FIL  AF-climb then KA be.like.this FIL  be.like.this above stone PROG AF-go AF.ride head then KA  head then  head FIL  I.forgot
  AF-go AF.ride FIL  AF.ride head FIL animal
  PROG AF-go FIL  AF.ride head=3SG.GEN  animal NOM child this PFV.PART
  PROG FIL  <AF>run NOM then KA  then KA  animal
   might.be.different forgot.this  I.forgot
  that KA this NOM  AUX.PST AF-go AF.arrive be.like.this FIL <AF>run there NOM  FIL dear  dear this PFV.PART then AF-go be.like.this  above cliff PFV.PART then AUX.PST
  AF.stumble NOM  child this AF.from cliff AUX.PST AF.stumble FIL AF.arrive FIL  inside FIL be.like.this  be.at-LF water  be.like.this lake
  AUX.PST AF-go lake PFV.PART PART
  thus  tree all NOM this  PROG be.like.this FIL  PROG FIL  <AF>grow FIL be.like.this  cliff  PART AF.stumble FIL  lake child this PFV.PART then  <AF>see AF.from up NOM deer
  thus  then KA AF-stumble all  CONJ dog  AF-together FIL  AF.fall FIL  then KA lake
  thus AF-fall lake PFV.PART then PROG=3SG.GEN  take-PF NOM dog PROG=3SG.GEN  ride-PF then KA  head=3SG.GEN PFV.PART  be.like.this shoulder=3SG.GEN PFV.PART
  then thus AF-go  AUX.PST FIL FS  AF.walk AF.ride  carry.on.back dog=3SG.GEN PFV.PART that KA child this thus AF-go FIL  AF-see one then tree again then
  come NOM dog=3SG.GEN PFV.PART then  PROG=3SG.GEN say-PF NEG.IMP  NEG.IMP speak NEG.IMP make.noise PROG=3SG.GEN say-PF NOM dog=3SG.GEN
  then thus AUX.PST AF-climb FIL be.like.this  tree FIL  tree this NOM  tree  tree <PFV>fall.down this NOM  child this PFV.PART then  CONJ dog PROG AF-go AF-see FIL back=3SG.GEN   back tree
  FIL AF-go AF-see back tree then  AF-see back PROG there NOM EXIST frog  CONJ frog EXIST there
  thus PROG  <AF>see frog again then  many NOM frog AF-come AF.from back there PFV.PART AF-be.at  AF.from be.like.this FIL  water FIL back tree that PFV.PART
  then thus  child this AUX.PST AF-take one FIL  one frog PFV.PART then PROG=3SG.GEN  then KA put-PF hand=3SG.GEN PFV.PART then
  go.PST  go.PST PFV.PART CONJ  CONJ dog=3SG.GEN this PFV.PART  AF.go house=3SG.GEN PFV.PART
  then AF-be.at NOM  frog this many FS EXIST  sit above tree PROG outlook 3PL NOM  AUX.PST <AF>bring one frog
