  <AF><PFV>see=1SG.NOM one FIL   people FIL  PROG AF-take FIL  fruit tree
  then   come-LF=3SG.GEN <AF>collect ground first then AF-go AF-take above also
  then  long little PART  AF-come one   AF-come one FIL  child AF.ride bicycle
  AF-come FIL  AF-come FIL  AF-come FIL  AF-take FIL  fruit tree that
  AF-come  AF-come AF-take fruit tree <PF.PFV>.pick elder that
  then   then PST=3SG.GEN put-PF   bicycle  first then thus afterwards=3SG.GEN  AF.leave ASP
  FS  FIL  AF.leave ASP PART  thus  PST AF-pass AF.bump FIL  FIL  stone NOM  bicycle=3SG.GEN that then
  that NOM  PST AF.fall ASP  then PST AF.pour FIL  FIL  fruit tree <PF.PFV>put=3SG.GEN RED-basket this
  then  AF-come FIL   AF-come NOM  three FIL   person  AF-come then come-LF=3SG.GEN <AF>lift ASP
  then  then  thus  put-PF=3PL.GEN   FS  FS  FS FIL put-PF <AF>pick=3PL.GEN NOM  fruit tree that CONJ put-PF=3PL.GEN basket again PART thus
  FIL put-PF=3SG.GEN  bicycle ASP PART
  people AF<PFV>ride bicycle that PART  NEG FIL   that  NEG AF.ride.IMP bicycle  ASP PST AF.walk  <AF>push ASP
  then  then  afterwards=3SG.GEN  two FIL  three people  three people NOM  AF-come FIL  AF-pass side FIL  lower.trunk tree there
  then   that NOM FS elder AF<PFV>go above PART  FIL  look-LF=3SG.GEN  real PART take-LF=3SG.GEN this
  Q what PROG=3SG.GEN Q think-PF Q FIL  that PST AF.lose Q be.like.this
  FIL  Q be.like.this how NOM PFV-pass-LF=3SG.GEN
  FIL  NEG=1SG.GEN know-PF.IMP that ASP
